import { injectable } from 'inversify'
import { Observable } from 'rxjs'
import 'reflect-metadata'
import { DataInjection, Signal } from '../../core/apis/DataInjection'

import { Telegraf, Markup } from 'telegraf'
import { Subject } from 'rxjs'
import { sampleID, Logger } from '../../utils'
import { GeoPoint, RawSample } from '../../core/models'


const logger = Logger('TgDataInjection ')

type Session = {
  state: State,
  loc?: GeoPoint,
  risk?: number,
  timestamp?: Date
}

type State = 'waiting for loc' | 'waiting for number' | 'waiting for confirmation' | 'Confirmed' | 'Subscribed'

@injectable()
export class TgDataInjection implements DataInjection {
  bot = new Telegraf('1667286177:AAEbRz5di9CqqwJcz8EDmyVAOTameSqqEtA')

  session = new Map<number, Session>()
  subject = new Subject<RawSample>();

  constructor() {
    this.bot.launch()

    //The bot will request new info every 20 mins

    setInterval(() => {
      for (const entry of this.session.entries()) {
        if (entry[1].timestamp && entry[1].timestamp < new Date(Date.now() - 1200000) && entry[1].state == 'Subscribed') {
          this.bot.telegram.sendMessage(entry[0], '–ü—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –µ—â—ë —Ä–∞–∑. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /stop –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞.', Markup
            .keyboard(['–°—Ç–∞—Ä—Ç'])
            .oneTime()
            .resize())
          entry[1].timestamp = new Date()
          logger(`User ${entry[0]} was prompted to send info again.`)
        }
      }
    }, 1000)


    this.bot.start((ctx) => {
      if (ctx.message) {
        this.session.set(ctx.message.from.id, { state: 'waiting for loc' })
        logger(`User ${ctx.message.from.id} started the bot`)
        ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, —ç—Ç–æ –ê–∫–≤–∞–¥–∏—Å–∫–æ–±–æ—Ç. –ù–∞–∂–º–∏—Ç–µ –°–¢–ê–†–¢, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.', Markup
          .keyboard(['–°—Ç–∞—Ä—Ç'])
          .oneTime()
          .resize())
      }
    })

    this.bot.on('location', (ctx) => {
      if (ctx.message) {
        const session = this.session.get(ctx.message.from.id)

        if (session && session.state == 'waiting for loc') {
          session.loc = {
            lat: ctx.message.location.latitude,
            lng: ctx.message.location.longitude
          }
          session.state = 'waiting for number'
          ctx.reply('–®–∫–∞–ª–∞ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–ª–∏—Ü–∏–∏/–û–ú–û–ù: \n 1: –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∞–Ω–∏–π \n 2: –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∞–Ω–∏–π \n 3: –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–¥–µ—Ä–∂–∏–≤–∞—é—Ç \n 4: –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–µ—Ä–∂–∞–Ω–∏–π  \n 5: –û—á–µ–Ω—å –º–Ω–æ–≥–æ, –º–∞—Å—Å–æ–≤—ã–µ –∑–∞–¥–µ—Ä–∂–∞–Ω–∏—è ')
          ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä 1-5, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å–∏—Ç—É–∞—Ü–∏—é –≤ –≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏', Markup.keyboard([['1', '2', '3', '4', '5'], ['Start again']]).oneTime().resize())
        }
        else ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥')
      }
    })

    this.bot.on('text', (ctx) => {
      const risk = parseInt(ctx.message.text)
      const session = this.session.get(ctx.message.from.id)

      if (ctx.message.text == '–°—Ç–∞—Ä—Ç' || ctx.message.text == '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ') {
        this.session.set(ctx.message.from.id, { state: 'waiting for loc' })
        const responses = ['–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –ª–æ–∫–∞—Ü–∏–µ–π']
        ctx.reply(responses[~~(Math.random() * responses.length)], Markup
          .keyboard(['–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'])
          .oneTime()
          .resize())
      }

      else if (risk > 0 && risk <= 5 && session && session.state == 'waiting for number') {
        session.risk = parseInt(ctx.message.text)

        session.state = 'waiting for confirmation'
        ctx.reply('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?', Markup.keyboard(['–û—Ç–ø—Ä–∞–≤–∏—Ç—å', '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']).oneTime().resize())
      }

      else if (ctx.message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' && session && session.loc && session.risk && session.state == 'waiting for confirmation') {
        const { loc, risk } = session
        const id = ctx.message.from.id.toString()
        ctx.reply('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è..').then(() => {
          this.subject.next({
            lat: loc.lat,
            lng: loc.lng,
            date: Date.now(),
            id: sampleID(id, loc.lat, loc.lng),
            sourceId: id,
            risk,
          })
        })
        logger(`User ${ctx.message.from.id} has sent new data. Latitude:: ${loc.lat}, longitude: ${loc.lng}, risk: ${risk}`)
        session.state = 'Subscribed'
        session.timestamp = new Date()
        const responses = ['–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.', '–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ.']
        ctx.reply(responses[~~(Math.random() * responses.length)], Markup.keyboard(['/start']).oneTime().resize())
      }
      else ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥')
    })

  }
  emit(signal: Signal, id: string): void {
    switch (signal) {
      case 'ALREADY_REPORTED_LOCATION':
        this.bot.telegram.sendMessage(id, '–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ –º–µ—Å—Ç–æ, –Ω–µ —Ç–∞–∫ –ª–∏? –î–µ—Ä–∂–∏—Ç–µ –Ω–∞—Å –≤ –∫—É—Ä—Å–µ, –Ω–æ –Ω–µ —Ç–∞–∫ —á–∞—Å—Ç–æ üôÇ')
        break
      case 'TOO_HIGH_FREQUENCY':
        this.bot.telegram.sendMessage(id, '–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ —Ä–≤–µ–Ω–∏–µ, –Ω–æ –æ—Ü–µ–Ω–∫–∞ –Ω–µ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω–∞, —Å–¥–µ–ª–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤.')
        break
      case 'ACCEPTED':
        this.bot.telegram.sendMessage(id, '–°–ø–∞—Å–∏–±–æ!')
        break
      case 'INCONSISTENT_MOVEMENT':
        this.bot.telegram.sendMessage(id, '–ú—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã –≤ –≤–∞—à–µ–º –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!')
        break
    }
  }

  listen(): Observable<RawSample> {
    return this.subject
  }
}
